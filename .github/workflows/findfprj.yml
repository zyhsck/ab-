name: Find FPRJ Files
on:
  workflow_dispatch:
  repository_dispatch:
    types: [find-fprj-request]

jobs:
  find-fprj:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find .fprj files
        run: |
          # 递归查找所有.fprj文件
          find . -type f -name "*.fprj" | jq -R -s 'split("\n") | map(select(. != ""))' > fprj_files.json
          echo "Found $(jq length fprj_files.json) .fprj files"

      - name: Prepare JSON response
        id: prepare-response
        run: |
          # 生成完整响应JSON
          jq -n \
            --arg run_id "$GITHUB_RUN_ID" \
            --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            --slurpfile files fprj_files.json \
            '{
              status: "success",
              run_id: $run_id,
              timestamp: $timestamp,
              file_count: ($files[0] | length),
              files: $files[0]
            }' > response.json
          
          # 打印部分结果便于调试
          echo "JSON preview:"
          jq '.files[0:3]' response.json

      - name: Validate API URL
        id: validate-api-url
        run: |
          API_URL="${{ secrets.RESULT_API_URL }}"
          
          # 验证URL格式
          if [[ -z "$API_URL" ]]; then
            echo "::error::RESULT_API_URL secret is not set!"
            exit 1
          fi
          
          # 检查是否包含非法字符
          if [[ "$API_URL" =~ [\"\'<>\\\`\|\{\}\[\]] ]]; then
            echo "::error::API URL contains invalid characters"
            echo "Cleaned URL: ${API_URL//[\"\'<>\\\`\|\{\}\[\]]/}"
            exit 1
          fi
          
          # 验证URL协议
          if [[ ! "$API_URL" =~ ^https?:// ]]; then
            echo "::error::API URL must start with http:// or https://"
            exit 1
          fi
          
          # 安全显示URL部分信息
          HOST=$(echo "$API_URL" | awk -F/ '{print $3}')
          echo "Valid API URL for: $HOST"
          echo "API_URL=$API_URL" >> $GITHUB_ENV

      - name: Send results
        run: |
          # 确保URL已经被清理
          API_URL="${{ env.API_URL }}"
          
          # 发送请求并添加重试
          curl --fail-with-body \
            --retry 3 \
            --retry-delay 2 \
            --max-time 30 \
            -X POST "$API_URL" \
            -H "Content-Type: application/json" \
            -H "X-GitHub-Run: $GITHUB_RUN_ID" \
            --data-binary "@response.json"
