name: Find FPRJ Files
on:
  workflow_dispatch: # 允许手动触发
  repository_dispatch: # 允许通过API触发
    types: [find-fprj-request]

jobs:
  find-fprj:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.set-output.outputs.result }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find .fprj files
        run: |
          # 递归查找所有.fprj文件并保存为JSON数组
          find . -type f -name "*.fprj" | jq -R -n '[inputs | select(length>0)]' > fprj_files.json
          # 打印文件内容以便调试
          cat fprj_files.json

      - name: Set result output
        id: set-output
        run: |
          # 从文件中读取生成的JSON
          json_result=$(cat fprj_files.json)
          
          # 创建包含完整响应的JSON
          response_json=$(jq -n \
            --arg run_id "$GITHUB_RUN_ID" \
            --argjson files "$json_result" \
            '{
              status: "success",
              run_id: $run_id,
              timestamp: (now | todate),
              file_count: ($files | length),
              files: $files
            }')
          
          # 正确设置作业输出
          echo "result=$(echo $response_json | jq -c .)" >> $GITHUB_OUTPUT
          echo "结果已设置到输出"

      - name: Return results via API
        run: |
          # 从仓库的secrets获取用户API端点
          API_URL=${{ secrets.RESULT_API_URL }}
          
          # 获取作业输出
          RESPONSE_JSON='${{ toJson(steps.set-output.outputs.result) }}'
          
          # 发送POST请求到用户API
          curl -X POST "$API_URL" \
            -H "Content-Type: application/json" \
            -d "$RESPONSE_JSON"
