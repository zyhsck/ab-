name: Generate Watch Face
on:
  workflow_dispatch:
    inputs:
      input_json:
        description: 'JSON containing model path and image Base64'
        required: true

jobs:
  generate:
    runs-on: windows-latest
    permissions:
      contents: write
      
    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 解析JSON输入
      - name: Parse JSON input
        id: parse-json
        run: |
          $jsonInput = '${{ github.event.inputs.input_json }}' | ConvertFrom-Json
          echo "fprj_path=$($jsonInput.model)" >> $env:GITHUB_OUTPUT
          echo "image_base64=$($jsonInput.file)" >> $env:GITHUB_OUTPUT

      # 3. 准备项目文件
      - name: Prepare project
        run: |
          # 创建项目目录
          $projectDir = "project"
          New-Item -ItemType Directory -Path $projectDir -Force
          
          # 复制并重命名FPRJ文件
          Copy-Item -Path "${{ steps.parse-json.outputs.fprj_path }}" -Destination "$projectDir\fprj.fprj" -Force
          
          # 创建图片目录
          $imageDir = "$projectDir\images"
          New-Item -ItemType Directory -Path $imageDir -Force
          
          echo "project_dir=$projectDir" >> $env:GITHUB_OUTPUT

      # 4. 替换图片（使用.NET方法）
      - name: Replace image
        run: |
          $projectDir = "${{ steps.parse-json.outputs.project_dir }}"
          $imageDir = "$projectDir\images"
          
          # 确保图片目录存在
          if (-not (Test-Path $imageDir)) {
              New-Item -ItemType Directory -Path $imageDir -Force
          }
          
          # 解码Base64图片
          $bytes = [Convert]::FromBase64String('${{ steps.parse-json.outputs.image_base64 }}')
          $tempImage = "$env:TEMP\temp.png"
          [IO.File]::WriteAllBytes($tempImage, $bytes)
          
          # 使用.NET方法压缩图片
          Add-Type -AssemblyName System.Drawing
          $image = [System.Drawing.Image]::FromFile($tempImage)
          
          # 创建缩略图
          $thumb = $image.GetThumbnailImage(320, 320, $null, [IntPtr]::Zero)
          $thumb.Save("$imageDir\pic.png", [System.Drawing.Imaging.ImageFormat]::Png)
          
          # 清理资源
          $image.Dispose()
          $thumb.Dispose()
          
          # 验证图片
          if (-not (Test-Path "$imageDir\pic.png")) {
              Write-Error "Failed to save image"
              exit 1
          }

      # 5. 创建必要的输出目录
      - name: Create output directories
        run: |
          New-Item -ItemType Directory -Path "project\output" -Force
          New-Item -ItemType Directory -Path "output" -Force

      # 6. 设置Python环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 7. 运行Python脚本
      - name: Run Python script
        run: |
          python compile_watchface.py

      # 8. 创建Release并获取下载链接
      - name: Create Release and Get URL
        id: create-release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: "face-${{ github.run_id }}"
          files: output/*.face
          draft: false
          prerelease: false
      
    outputs:
      download_url: ${{ steps.create-release.outputs.url }}
