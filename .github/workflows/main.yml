name: Generate Watch Face
on:
  repository_dispatch:
    types: [generate_watchface]
  workflow_dispatch:
    inputs:
      input_json:
        description: 'JSON containing model path and image Base64'
        required: true

jobs:
  generate:
    runs-on: windows-latest
    permissions:
      contents: write
      
    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 增加虚拟内存到16GB
      - name: Increase virtual memory
        run: |
          wmic computersystem set AutomaticManagedPagefile=False
          wmic pagefileset create name="C:\pagefile.sys"
          wmic pagefileset where name="C:\pagefile.sys" set InitialSize=16384,MaximumSize=16384
          wmic pagefileset list brief
          echo "Virtual memory increased to 16GB"

      # 3. 直接处理输入数据
      - name: Parse input and save data
        id: parse-input
        run: |
          # 根据事件类型选择输入源
          if ('${{ github.event_name }}' -eq 'repository_dispatch') {
            $inputData = '${{ toJson(github.event.client_payload.input_json) }}'
          } else {
            $inputData = '${{ toJson(github.event.inputs.input_json) }}'
          }
          
          # 解析JSON
          $jsonInput = $inputData | ConvertFrom-Json
          
          # 保存模型路径到文件
          $modelPath = $jsonInput.model
          $modelPath | Out-File -FilePath "$env:RUNNER_TEMP\model_path.txt" -Encoding ascii
          
          # 保存Base64到文件
          $base64File = "$env:RUNNER_TEMP\image_base64.txt"
          $jsonInput.file | Out-File -FilePath $base64File -Encoding ascii -NoNewline
          
          # 输出文件路径
          echo "model_path_file=$env:RUNNER_TEMP\model_path.txt" >> $env:GITHUB_OUTPUT
          echo "base64_file=$base64File" >> $env:GITHUB_OUTPUT

      # 4. 准备项目文件
      - name: Prepare project
        run: |
          # 从文件读取模型路径
          $modelPath = Get-Content -Path "$env:RUNNER_TEMP\model_path.txt"
          
          # 创建项目目录
          $projectDir = "project"
          New-Item -ItemType Directory -Path $projectDir -Force
          
          # 获取项目目录路径
          $sourceDir = Split-Path -Path $modelPath -Parent
          
          # 复制整个项目目录
          Copy-Item -Path "$sourceDir\*" -Destination $projectDir -Recurse -Force
          
          # 重命名FPRJ文件
          $fprjFile = Get-ChildItem -Path $projectDir -Filter "*.fprj" | Select-Object -First 1
          if ($fprjFile) {
              Rename-Item -Path $fprjFile.FullName -NewName "fprj.fprj" -Force
          } else {
              Write-Error "No FPRJ file found in project directory"
              exit 1
          }
          
          # 查找所有pic.png文件
          $picFiles = Get-ChildItem -Path $projectDir -Filter "pic.png" -Recurse
          
          if (-not $picFiles) {
              Write-Error "No pic.png files found in project directory"
              exit 1
          }
          
          # 从文件读取Base64字符串
          $base64File = "${{ steps.parse-input.outputs.base64_file }}"
          $base64String = Get-Content -Path $base64File -Raw
          
          # 解码Base64
          $bytes = [Convert]::FromBase64String($base64String)
          
          # 替换所有pic.png文件
          foreach ($file in $picFiles) {
              [IO.File]::WriteAllBytes($file.FullName, $bytes)
          }
          
          # 创建输出目录
          New-Item -ItemType Directory -Path "$projectDir\output" -Force

      # 5. 设置Python环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 6. 运行Python脚本 (更新版)
      - name: 运行Python脚本
        env:
          PROJECT_PATH: "${{ github.workspace }}/project/fprj.fprj"
          OUTPUT_DIR: "${{ github.workspace }}/output"
        run: |
          python compile_watchface.py
      
      # 7. 验证输出文件 (更新版)
      - name: 验证输出文件
        id: verify-output
        run: |
          $outputDir = "${{ github.workspace }}/output"
          $file = Get-ChildItem -Path $outputDir -Filter "*.face"
          if ($file) {
              $size = $file.Length
              Write-Host "输出文件大小: $size 字节"
              echo "face_file=$($file.FullName)" >> $env:GITHUB_OUTPUT
          } else {
              Write-Error "未找到输出文件"
              exit 1
          }
      # 8. 创建Release
      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v2
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: "face-${{ github.run_id }}"
          files: ${{ steps.verify-output.outputs.face_file }}
          draft: false
          prerelease: false
        # 捕获release信息作为输出
        continue-on-error: false
      
      # 9. 传递release信息给删除任务
      - name: Pass release data
        id: pass-data
        run: |
          echo "release_id=${{ steps.create-release.outputs.id }}" >> $env:GITHUB_OUTPUT
          echo "release_tag=face-${{ github.run_id }}" >> $env:GITHUB_OUTPUT
    outputs:
      release_id: ${{ steps.pass-data.outputs.release_id }}
      release_tag: ${{ steps.pass-data.outputs.release_tag }}

  # 自动删除release任务
  delete_release:
    name: Auto-Delete Release
    needs: generate
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # 1. 等待10分钟
      - name: Wait 10 minutes
        uses: juliangruber/wait-for@v2
        with:
          time: 10m
      
      # 2. 删除release和标签
      - name: Delete Release
        uses: actions/github-script@v6
        env:
          PAT: ${{ secrets.PAT }}
        with:
          script: |
            const release_id = ${{ needs.generate.outputs.release_id }};
            const release_tag = '${{ needs.generate.outputs.release_tag }}';
            
            try {
              // 删除release
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release_id
              });
              
              // 删除Git标签
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${release_tag}`
              });
              
              console.log(`Successfully deleted release ${release_id} and tag ${release_tag}`);
            } catch (error) {
              console.error(`Deletion failed: ${error.message}`);
              // 标记步骤失败但不中断工作流
              core.setFailed(`Release deletion error: ${error.message}`);
            }
