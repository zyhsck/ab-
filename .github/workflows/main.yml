name: Generate Watch Face
on:
  repository_dispatch:
    types: [generate_watchface]
  workflow_dispatch:
    inputs:
      input_json:
        description: 'JSON containing model path and image Base64'
        required: true

jobs:
  generate:
    runs-on: windows-latest
    permissions:
      contents: write
      
    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 增加虚拟内存到16GB
      - name: Increase virtual memory
        run: |
          wmic computersystem set AutomaticManagedPagefile=False
          wmic pagefileset create name="C:\pagefile.sys"
          wmic pagefileset where name="C:\pagefile.sys" set InitialSize=16384,MaximumSize=16384
          wmic pagefileset list brief
          echo "Virtual memory increased to 16GB"

      # 3. 统一输入格式
      - name: Prepare Input Data
        id: prepare-input
        run: |
          # 根据事件类型选择输入源
          if ('${{ github.event_name }}' -eq 'repository_dispatch') {
            $inputData = '${{ toJson(github.event.client_payload.input_json) }}'
          } else {
            $inputData = '${{ toJson(github.event.inputs.input_json) }}'
          }
          echo "input_json=$inputData" >> $env:GITHUB_OUTPUT

      # 4. 解析JSON输入并保存Base64到文件
      - name: Parse JSON input and save Base64
        id: parse-json
        run: |
          # 获取JSON输入
          $jsonInput = '${{ steps.prepare-input.outputs.input_json }}' | ConvertFrom-Json
          echo "fprj_path=$($jsonInput.model)" >> $env:GITHUB_OUTPUT
          
          # 将Base64字符串保存到文件
          $base64File = "$env:RUNNER_TEMP\image_base64.txt"
          
          # 移除可能的JSON转义字符
          $cleanBase64 = $jsonInput.file -replace '\\"', '"' -replace '\\\\', '\\'
          
          # 写入文件
          $cleanBase64 | Out-File -FilePath $base64File -Encoding ascii -NoNewline
          
          echo "base64_file=$base64File" >> $env:GITHUB_OUTPUT

      # 5. 准备项目文件
      - name: Prepare project
        run: |
          # 创建项目目录
          $projectDir = "project"
          New-Item -ItemType Directory -Path $projectDir -Force
          
          # 获取项目目录路径
          $sourceDir = Split-Path -Path "${{ steps.parse-json.outputs.fprj_path }}" -Parent
          
          # 复制整个项目目录
          Copy-Item -Path "$sourceDir\*" -Destination $projectDir -Recurse -Force
          
          # 重命名FPRJ文件
          $fprjFile = Get-ChildItem -Path $projectDir -Filter "*.fprj" | Select-Object -First 1
          if ($fprjFile) {
              Rename-Item -Path $fprjFile.FullName -NewName "fprj.fprj" -Force
          } else {
              Write-Error "No FPRJ file found in project directory"
              exit 1
          }
          
          # 查找所有pic.png文件
          $picFiles = Get-ChildItem -Path $projectDir -Filter "pic.png" -Recurse
          
          if (-not $picFiles) {
              Write-Error "No pic.png files found in project directory"
              exit 1
          }
          
          # 从文件读取Base64字符串
          $base64File = "${{ steps.parse-json.outputs.base64_file }}"
          $base64String = Get-Content -Path $base64File -Raw
          
          # 调试：输出Base64字符串的前100个字符
          Write-Host "Base64 preview: $($base64String.Substring(0, 100))..."
          
          # 验证Base64格式
          if (-not ($base64String -match '^[A-Za-z0-9+/]+={0,2}$')) {
              Write-Error "Invalid Base64 format detected"
              exit 1
          }
          
          # 解码Base64
          try {
              $bytes = [Convert]::FromBase64String($base64String)
          } catch {
              Write-Error "Failed to decode Base64: $_"
              exit 1
          }
          
          # 替换所有pic.png文件
          foreach ($file in $picFiles) {
              try {
                  [IO.File]::WriteAllBytes($file.FullName, $bytes)
                  Write-Host "Replaced pic.png at: $($file.FullName)"
              } catch {
                  Write-Error "Failed to write file: $_"
                  exit 1
              }
          }
          
          # 创建输出目录
          New-Item -ItemType Directory -Path "$projectDir\output" -Force

      # 6. 设置Python环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 7. 运行Python脚本
      - name: Run Python script
        run: |
          python compile_watchface.py

      # 8. 验证输出文件
      - name: Verify output file
        run: |
          $file = Get-ChildItem -Path "output" -Filter "*.face"
          if ($file) {
              $size = $file.Length
              Write-Host "Output file size: $size bytes"
          } else {
              Write-Error "No output file found"
              exit 1
          }

      # 9. 创建Release
      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v2
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: "face-${{ github.run_id }}"
          files: output/*.face
          draft: false
          prerelease: false
      
      # 10. 触发延迟删除
      - name: Trigger Delayed Deletion
        uses: actions/github-script@v6
        env:
          PAT: ${{ secrets.PAT }}
        with:
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: `face-${context.runId}`
            });
            
            const payload = {
              release_id: release.data.id,
              release_tag: release.data.tag_name,
              release_url: release.data.html_url
            };
            
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'delete_release.yml',
              ref: 'main',
              inputs: {
                release_data: JSON.stringify(payload)
              }
            });
      # 11. 显式返回 run_id
      - name: Expose Run ID
        run: |
          echo "run_id=${{ github.run_id }}" >> $GITHUB_OUTPUT
          echo "run_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT
    outputs:
      download_url: ${{ steps.create-release.outputs.url }}

  # 删除工作流
  delete_release:
    name: Delete Release After Delay
    needs: generate
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Parse Release Data
        id: parse-data
        run: |
          RELEASE_DATA='${{ toJson(github.event.inputs.release_data) }}'
          echo "release_data=$RELEASE_DATA" >> $GITHUB_OUTPUT
      
      - name: Wait 10 minutes
        uses: juliangruber/wait-for@v2
        with:
          time: 10m
      
      - name: Delete Release
        uses: actions/github-script@v6
        env:
          PAT: ${{ secrets.PAT }}
        with:
          script: |
            const releaseData = JSON.parse('${{ steps.parse-data.outputs.release_data }}');
            try {
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseData.release_id
              });
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${releaseData.release_tag}`
              });
            } catch (error) {
              console.error(`Failed to delete release: ${error.message}`);
              core.setFailed('Release deletion failed');
            }
