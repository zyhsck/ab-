name: Generate Watch Face
on:
  workflow_dispatch:
    inputs:
      input_json:
        description: 'JSON containing model path and image Base64'
        required: true

jobs:
  generate:
    runs-on: windows-latest
    permissions:
      contents: write
      
    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 增加虚拟内存到16GB
      - name: Increase virtual memory
        run: |
          wmic computersystem set AutomaticManagedPagefile=False
          wmic pagefileset create name="C:\pagefile.sys"
          wmic pagefileset where name="C:\pagefile.sys" set InitialSize=16384,MaximumSize=16384
          wmic pagefileset list brief
          echo "Virtual memory increased to 16GB"

      # 3. 解析JSON输入
      - name: Parse JSON input
        id: parse-json
        run: |
          $jsonInput = '${{ github.event.inputs.input_json }}' | ConvertFrom-Json
          echo "fprj_path=$($jsonInput.model)" >> $env:GITHUB_OUTPUT
          echo "image_base64=$($jsonInput.file)" >> $env:GITHUB_OUTPUT

      # 4. 准备项目文件
            # 4. 准备项目文件
      - name: Prepare project
        run: |
          # 创建项目目录
          $projectDir = "project"
          New-Item -ItemType Directory -Path $projectDir -Force
          
          # 获取项目目录路径
          $sourceDir = Split-Path -Path "${{ steps.parse-json.outputs.fprj_path }}" -Parent
          
          # 复制整个项目目录
          Copy-Item -Path "$sourceDir\*" -Destination $projectDir -Recurse -Force
          
          # 重命名FPRJ文件
          $fprjFile = Get-ChildItem -Path $projectDir -Filter "*.fprj" | Select-Object -First 1
          if ($fprjFile) {
              Rename-Item -Path $fprjFile.FullName -NewName "fprj.fprj" -Force
          } else {
              Write-Error "No FPRJ file found in project directory"
              exit 1
          }
          
          # 查找所有pic.png文件（递归搜索）
          $picFiles = Get-ChildItem -Path $projectDir -Filter "pic.png" -Recurse
          
          # 输出搜索结果
          Write-Host "Found $($picFiles.Count) pic.png files"
          foreach ($file in $picFiles) {
              Write-Host " - $($file.FullName)"
          }
          
          if (-not $picFiles) {
              Write-Error "No pic.png files found in project directory"
              exit 1
          }
          
          # 替换所有pic.png文件
          $bytes = [Convert]::FromBase64String('${{ steps.parse-json.outputs.image_base64 }}')
          foreach ($file in $picFiles) {
              [IO.File]::WriteAllBytes($file.FullName, $bytes)
              Write-Host "Replaced pic.png at: $($file.FullName)"
          }
          
          # 创建输出目录
          New-Item -ItemType Directory -Path "$projectDir\output" -Force

      # 5. 设置Python环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 6. 运行Python脚本
      - name: Run Python script
        run: |
          python compile_watchface.py

      # 7. 验证输出文件
      - name: Verify output file
        run: |
          $file = Get-ChildItem -Path "output" -Filter "*.face"
          if ($file) {
              $size = $file.Length
              Write-Host "Output file size: $size bytes"
          } else {
              Write-Error "No output file found"
              exit 1
          }

      # 8. 创建Release并获取下载链接
      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v2
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: "face-${{ github.run_id }}"
          files: output/*.face
          draft: false
          prerelease: false
      
      # 9. 触发延迟删除工作流
      - name: Trigger Delayed Deletion
        uses: actions/github-script@v6
        env:
          PAT: ${{ secrets.PAT }}
        with:
          script: |
            // 获取刚创建的Release信息
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: `face-${context.runId}`
            });
            
            // 准备删除工作流触发负载
            const payload = {
              release_id: release.data.id,
              release_tag: release.data.tag_name,
              release_url: release.data.html_url
            };
            
            // 触发延迟删除工作流
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'delete_release.yml',
              ref: 'main',  // 替换为你的分支名
              inputs: {
                release_data: JSON.stringify(payload)
              }
            });
            
            console.log(`Scheduled deletion for release: ${release.data.html_url}`);
      
    outputs:
      download_url: ${{ steps.create-release.outputs.url }}

  # 新增删除工作流
  delete_release:
    name: Delete Release After Delay
    needs: generate
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # 1. 解析输入参数
      - name: Parse Release Data
        id: parse-data
        run: |
          RELEASE_DATA='${{ toJson(github.event.inputs.release_data) }}'
          echo "release_data=$RELEASE_DATA" >> $GITHUB_OUTPUT
          echo "Parsed release data: $RELEASE_DATA"
      
      # 2. 等待10分钟
      - name: Wait 10 minutes
        uses: juliangruber/wait-for@v2
        with:
          time: 10m
      
      # 3. 删除Release
      - name: Delete Release
        uses: actions/github-script@v6
        env:
          PAT: ${{ secrets.PAT }}
        with:
          script: |
            const releaseData = JSON.parse('${{ steps.parse-data.outputs.release_data }}');
            
            try {
              // 删除Release
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseData.release_id
              });
              
              // 删除标签
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${releaseData.release_tag}`
              });
              
              console.log(`✅ Successfully deleted release: ${releaseData.release_url}`);
            } catch (error) {
              console.error(`❌ Failed to delete release: ${error.message}`);
              core.setFailed('Release deletion failed');
            }
