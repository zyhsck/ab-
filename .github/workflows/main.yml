name: Process FPRJ and Base64 Image
on:
  workflow_dispatch:
    inputs:
      input_json:
        description: 'JSON containing model path and image Base64 (e.g., {"model":"watchs/MiBand9pro/xxx.fprj","file":"base64string"})'
        required: true

jobs:
  process:
    runs-on: windows-latest
    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 解析JSON输入并提取参数
      - name: Parse JSON input
        id: parse-json
        run: |
          $jsonInput = '${{ github.event.inputs.input_json }}' | ConvertFrom-Json
          echo "fprj_path=$($jsonInput.model)" >> $env:GITHUB_OUTPUT
          echo "image_base64=$($jsonInput.file)" >> $env:GITHUB_OUTPUT

      # 3. 复制并重命名FPRJ文件到Python脚本目录
      - name: Prepare FPRJ file
        run: |
          # 获取Python脚本所在目录
          $pythonDir = Get-Location
          
          # 复制并重命名FPRJ文件
          Copy-Item -Path "${{ steps.parse-json.outputs.fprj_path }}" -Destination "$pythonDir/fprj.fprj" -Force
          
          # 验证文件是否存在
          if (-not (Test-Path "$pythonDir/fprj.fprj")) { 
            Write-Error "Failed to copy FPRJ file"
            exit 1
          }

      # 4. 定位.fprj文件所在目录的images子文件夹
      - name: Locate target image directory
        run: |
          $fprjDir = Split-Path -Path "${{ steps.parse-json.outputs.fprj_path }}" -Parent
          $targetDir = "$fprjDir/images"
          if (-not (Test-Path $targetDir)) { 
            New-Item -ItemType Directory -Path $targetDir -Force
          }
          echo "target_dir=$targetDir" >> $env:GITHUB_OUTPUT

      # 5. 解码Base64图片并替换目标文件
      - name: Replace image in FPRJ
        run: |
          $bytes = [Convert]::FromBase64String('${{ steps.parse-json.outputs.image_base64 }}')
          [IO.File]::WriteAllBytes("${{ env.target_dir }}/pic.png", $bytes)
          if (-not (Test-Path "${{ env.target_dir }}/pic.png")) { exit 1 }

      # 6. 运行Python脚本生成.face文件
      
      - name: Run Python script
        run: |
          python compile_watchface.py
          ls -R output  # 调试输出目录结构

      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: "face-${{ github.run_id }}"
          files: output/fprj.face
