name: Generate Watch Face
on:
  workflow_dispatch:
    inputs:
      input_json:
        description: 'JSON containing model path and image Base64'
        required: true

jobs:
  generate:
    runs-on: windows-latest
    permissions:
      contents: write
      
    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 增加虚拟内存到16GB
      - name: Increase virtual memory
        run: |
          wmic computersystem set AutomaticManagedPagefile=False
          wmic pagefileset create name="C:\pagefile.sys"
          wmic pagefileset where name="C:\pagefile.sys" set InitialSize=16384,MaximumSize=16384
          wmic pagefileset list brief
          echo "Virtual memory increased to 16GB"

      # 3. 解析JSON输入
      - name: Parse JSON input
        id: parse-json
        run: |
          $jsonInput = '${{ github.event.inputs.input_json }}' | ConvertFrom-Json
          echo "fprj_path=$($jsonInput.model)" >> $env:GITHUB_OUTPUT
          echo "image_base64=$($jsonInput.file)" >> $env:GITHUB_OUTPUT

      # 4. 准备项目文件
      - name: Prepare project
        run: |
          # 创建项目目录
          $projectDir = "project"
          New-Item -ItemType Directory -Path $projectDir -Force
          
          # 复制并重命名FPRJ文件
          Copy-Item -Path "${{ steps.parse-json.outputs.fprj_path }}" -Destination "$projectDir\fprj.fprj" -Force
          
          # 创建图片目录
          $imageDir = "$projectDir\images"
          New-Item -ItemType Directory -Path $imageDir -Force
          
          # 保存图片
          $bytes = [Convert]::FromBase64String('${{ steps.parse-json.outputs.image_base64 }}')
          [IO.File]::WriteAllBytes("$imageDir\pic.png", $bytes)
          
          # 创建输出目录
          New-Item -ItemType Directory -Path "$projectDir\output" -Force

      # 5. 设置Python环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 6. 安装Python依赖
      - name: Install Python dependencies
        run: |
          pip install psutil

      # 7. 运行Python脚本
      - name: Run Python script
        run: |
          python compile_watchface.py

      # 8. 验证输出文件
      - name: Verify output file
        run: |
          $file = Get-ChildItem -Path "output" -Filter "*.face"
          if ($file) {
              $size = $file.Length
              Write-Host "Output file size: $size bytes"
              if ($size -lt 1MB) {
                  # 输出工作目录内容用于调试
                  Write-Host "Contents of work directory:"
                  Get-ChildItem -Path "work" -Recurse
                  
                  # 输出编译工具日志
                  $logFile = Get-ChildItem -Path "work" -Filter "*.log" -Recurse
                  if ($logFile) {
                      Write-Host "Compiler log:"
                      Get-Content -Path $logFile.FullName
                  }
                  
                  Write-Error "Output file is too small"
                  exit 1
              }
          } else {
              Write-Error "No output file found"
              exit 1
          }

      # 9. 创建Release并获取下载链接
      - name: Create Release and Get URL
        id: create-release
        uses: softprops/action-gh-release@v2
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: "face-${{ github.run_id }}"
          files: output/*.face
          draft: false
          prerelease: false
      
    outputs:
      download_url: ${{ steps.create-release.outputs.url }}
