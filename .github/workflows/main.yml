name: Process FPRJ and Base64 Image
on:
  workflow_dispatch:
    inputs:
      input_json:
        description: 'JSON containing model path and image Base64 (e.g., {"model":"watchs/RedmiWatch5/test/rw5.fprj","file":"base64string"})'
        required: true

jobs:
  process:
    runs-on: windows-latest
    permissions:
      contents: write
      
    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 解析JSON输入并提取参数
      - name: Parse JSON input
        id: parse-json
        run: |
          $jsonInput = '${{ github.event.inputs.input_json }}' | ConvertFrom-Json
          echo "fprj_path=$($jsonInput.model)" >> $env:GITHUB_OUTPUT
          echo "image_base64=$($jsonInput.file)" >> $env:GITHUB_OUTPUT
          echo "project_dir=$(Split-Path -Path $($jsonInput.model) -Parent)" >> $env:GITHUB_OUTPUT

      # 3. 复制整个项目目录到工作目录
      - name: Copy project directory
        run: |
          # 创建项目目录
          $projectDir = "project"
          New-Item -ItemType Directory -Path $projectDir -Force
          
          # 复制整个项目目录
          Copy-Item -Path "${{ steps.parse-json.outputs.project_dir }}\*" -Destination $projectDir -Recurse -Force
          
          # 重命名FPRJ文件
          $fprjFile = Split-Path -Path "${{ steps.parse-json.outputs.fprj_path }}" -Leaf
          Rename-Item -Path "$projectDir\$fprjFile" -NewName "fprj.fprj"
          
          echo "project_dir=$projectDir" >> $env:GITHUB_OUTPUT

      # 4. 替换图片
      - name: Replace image
        run: |
          # 解码Base64图片
          $bytes = [Convert]::FromBase64String('${{ steps.parse-json.outputs.image_base64 }}')
          
          # 保存到项目目录的images子目录
          $imageDir = "${{ env.project_dir }}\images"
          if (-not (Test-Path $imageDir)) {
              New-Item -ItemType Directory -Path $imageDir -Force
          }
          
          [IO.File]::WriteAllBytes("$imageDir\pic.png", $bytes)
          
          # 验证图片
          if (-not (Test-Path "$imageDir\pic.png")) {
              Write-Error "Failed to save image"
              exit 1
          }

      # 5. 运行Python脚本
      - name: Run Python script
        run: |
          # 调试：列出项目目录
          Get-ChildItem -Path "${{ env.project_dir }}" -Recurse
          
          # 运行编译脚本
          python compile_watchface.py
          
          # 调试：检查输出文件
          if (Test-Path "output\*.face") {
              Write-Host "Output file exists"
          } else {
              Write-Host "Output file not found"
          }

      # 6. 创建Release并上传
      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v2
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: "face-${{ github.run_id }}"
          files: output/*.face
          draft: false
          prerelease: false

      # 7. 输出下载链接
      - name: Output Release URL
        run: |
          $downloadUrl = "https://github.com/${{ github.repository }}/releases/download/face-${{ github.run_id }}/$((Get-ChildItem output/*.face).Name)"
          echo "Download URL: $downloadUrl"
          echo "DOWNLOAD_URL=$downloadUrl" >> $env:GITHUB_ENV
